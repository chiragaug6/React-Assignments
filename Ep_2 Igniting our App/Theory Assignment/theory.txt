🤔QUE-1 :: What is `NPM`❓

    NPM is Software Package Manager.
    all npm package are defined inside package.json file.
    npm can Manager all the dependencies of our project.
    npm install all dependencies of our project in one line of cli command.


🤔QUE-2 :: What is `Parcel/Webpack`❓ Why do we need it❓

    Parcel and Webpack are bundlers for javascript application.

    The benefits of using a bundler like Parcel or Webpack are:

    1. Code organization
    2. Dependency management
    3. Performance optimization :code minification, dead code elimination, and asset optimization to reduce the overall file size and improve the loading time of your application.
    They can also split the code into chunks and enable lazy loading, which means that only the required code is loaded when needed, improving the initial page load performance.
    4.Transpilation and asset handling


🤔QUE-3 ::  What is `.parcel-cache`❓

    The .parcel-cache directory is a folder created by Parcel, a bundling tool for web applications. It stores cached data to speed up the build process by avoiding unnecessary recompilation of code and assets.


🤔QUE-4 ::  What is `npx`❓

    npx is a handy command-line tool that allows you to run packages and executables without the need for global installations, ensuring the correct package version and facilitating the use of various tools in your development workflow.


🤔QUE-5 :: What is difference between `dependencies` vs `devDependencies`❓

    dependencies are required for the production runtime of your application, while devDependencies are used during development but are not included in the production build.


🤔QUE-6 :: What is Tree Shaking❓

    tree shaking is a powerful optimization technique that helps eliminate unused code from JavaScript bundles, resulting in smaller file sizes, improved performance, and faster load times for web applications.


🤔QUE-7 :: What is Hot Module Replacement❓
    
    Hot Module Replacement (HMR) is a feature in web development tools that allows developers to make code changes and see them instantly applied in the running application without needing to reload the entire page or restart the application. It improves developer productivity by speeding up the development process and maintaining the application's state while updating only the changed modules. However, it is not meant for production use.


🤔QUE-8 :: List down your favourite 5 superpowers of Parcel and describe any 3 of them in your own words.

    1. Hot Module Replacement(HMR)
    2. Tree shaking
    3. Image optimization
    4. minification
    5. Cache optimization

    Image optimization : image optimization in Parcel involves reducing the file size of images through compression and resizing techniques. This results in faster loading times, lower bandwidth usage, and improved overall performance for your web application or website. 

    minification : when you develop a web application or website, you write code in a human-readable format to make it easier to understand and work with. However, this code contains extra spaces, line breaks, and comments that are not necessary for the computer to understand and execute the code.

    Parcel's code minification feature takes your code and removes these unnecessary elements, resulting in a smaller file size.

    By using code minification with Parcel, you can optimize your code for production environments, making your web application or website load faster and perform more efficiently.

    cache optimization :  cache optimization in Parcel makes your website load faster by using special names for files that allow the browser to remember and retrieve them quickly.


🤔QUE-9 :: What is `.gitignore`❓ What should we add and not add into it❓

    
    The .gitignore file is a text file that allows you to specify which files and directories Git should ignore when tracking changes in a repository.

    What To Add :
    1. Build artifacts
    2. Dependency directories
    3. IDE and editor-specific files
    4. Temporary files
    5. Logs and debugging output
    6. Credentials and sensitive information

    What Not To Add :
    1. Source code files
    2. Configuration files
    3. Documentation and assets


🤔QUE-10 :: What is the difference between `package.json` and `package-lock.json`❓

    package.json is a manually edited file that lists the project's metadata, dependencies, and scripts, while package-lock.json is a machine-generated file that records the specific versions of dependencies installed in the project. The package-lock.json file helps ensure consistent installations across different environments, while the package.json file allows you to manage and specify the project's dependencies and scripts

🤔QUE-11 :: Why should I not modify `package-lock.json`❓

    the package-lock.json file should be treated as an automatically generated file that ensures consistency in dependency versions. It is best to let the package manager handle its creation and updates to maintain a reliable and reproducible development environment.


🤔QUE-12 :: What is `node_modules`❓ Is it a good idea to push that on git❓

    it is generally considered best practice not to include the node_modules directory in version control. Instead, rely on package managers and version-             controlled lockfiles to manage and recreate the dependencies when setting up the project on different machines or for collaborators.

🤔QUE-13 :: What is the `dist` folder❓

    The dist means "distribution".
    the dist folder contains the compiled, bundled, and optimized version of your project's source code. It represents the final version that is ready for             deployment or distribution, and it is usually generated by build tools. It is not typically included in version control to keep the repository clean and avoid     redundancy.


🤔QUE-14 :: What is `browserlists`❓

    package.json file store data into key-value formate. browserlists is a one of the key inside a package.json file. the value of browserlists describe that the     our project will definitely work on this browser.
    it may or may not work in other browser but it definitely word on this browser.











